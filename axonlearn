
## Axon 学习

Axon 基于DDD领域驱动、cqrs读写分离、es事件回溯提供了一套完整的实现方案，帮助构建以三个核心概念为中心的应用程序。

### 1.1、DDD 和 CQRS

DDD和CQRS不赘述，网上有很多相关资料。
在Axon 框架中，DDD和CQRS组合在一起，实际上是将一个应用程序划分为多个组件，其中每个组件要么提供有关应用程序状态的信息，要么更改应用程序的状态。每个组件都有一个专注于这些职责的模型。如下图Axon结构：
![](https://img-blog.csdnimg.cn/2020111311425038.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUzMDQxOA==,size_1,color_FFFFFF,t_10)

主要分成以下几部分

* 领域对象 / Domain Object
* 实体 / Entity
* 领域事件 / Domain Event
* 聚合 / Aggregate
* 聚合根 / Aggregate Root
* 存储库 / Repository

### 1.2、事件回溯

事件回溯是一种通过事件历史记录存储应用程序状态的方法。它记录所有改变当前状态的事件和事实，并从这些事件累加出当前状态。当我们想知道这个状态是如何发生的，中间发生了什么，就可以通过溯源知晓。

---

### 2、Axon Framework

#### 2.1 Command

#### 2.2 Event

#### 2.3 Query

### 3、个人见解

虽然anxo提供了完整的规范，但是实际将这一套应用到项目中，会面临许多挑战：

1. axon有自己的机制，需要通过自动生成ddl语句创建相应的表，表灵活性受限；
2. 区分command、event，通过command触发event，业务复杂起来，代码阅读很困难（ide 无法自动跳，只能全局搜索），要找这个command驱动了哪些event，event又触发了哪些command...，需要非常完善的文档维护;
3. 业务变化，event、aggregate会有升级需求，需要显示添加类的版本管理；
4. anxo 4 版本推荐使用anxo server进行event传递，command、event 跨节点调用，节点之间形成网状，不仅增加了复杂度，也增加了风险；
5. 分布式事务采用saga，这个不太熟，有待讨论；
6. 网络资料较少，大规模的生产环境使用有待验证；

1. 传统的三层实现是贫血模型，数据和行为分离，服务无状态，可以迅速上手开发。ddd充血模型，数据和行为在一起，对设计建模有较高要求；
2. axon 框架


CQRS — Command Query Responsibility Segregation 
CQRS 将系统中的操作分为两类，即「命令」(Command) 与「查询」(Query)。命令则是对会引起数据发生变化操作的总称，即我们常说的新增，更新，删除这些操作，都是命令。而查询则和字面意思一样，即不会对数据产生变化的操作，只是按照某些条件查找数据

CQRS 的核心思想是将这两类不同的操作进行分离，为什么要分离？使程序变得更容易推理与维护，有时我们希望从不同的维度查询数据，或者需要将各种数据进行组合后返回给调用方。此时，将查询逻辑与业务逻辑糅合在一起会使软件迅速腐化，诸如逻辑混乱、可读性变差以及可扩展性降低等等一些列问题。

### 4、项目实例

### 5、 参考资料





















